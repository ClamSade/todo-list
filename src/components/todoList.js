
import { useEffect, useState } from "react"

// IMG
// import Corbeille from '../../assets/corbeille.png'

// CSS
import './style.css'

const TodoList = () => {
  
  const [todo, setTodo] = useState({
    array: [],
    tache: ''
  })
  
  const [store, setStore] = useState([]); // ce state contiendra les donnÃ©es du localStorage.

  /*
    On call la methode getItemLocalStorage(), qui se chargera de mettre Ã  jour notre state "store"
    en fonction de notre state todo.array
  */
  useEffect( () => {
    getItemLocalStorage()
  }, [todo.array]) // Cet useEffect dÃ©pend de todo.array, Il s'enclenchera Ã  chaque fois que todo.array subira une mise Ã  jour.

  /*
    Cet useEffect s'enclenche Ã  l'ouverture du component pour rÃ©cupÃ¨rer l'objet dans le localStorage et mettre Ã  jour
    notre state todo.array 
  */
  useEffect(() => {
    setTodo({array: getItemLocalStorage()})
  }, []) // DÃ©pendance vide. Cet useEffect s'enclenche uniquement Ã  l'ouverture du component


  const delteItem = (idItem) => {
    const newArray = [...todo.array] // on crÃ©e une copie de notre todo.array pour eviter de modifier le tableau initiale (sÃ©curitÃ©)
    const arrayAfterDelete = newArray.filter((value, index ) => { 
    // Utiliser la mÃ©thode filter pour supprimer un Ã©lÃ©ment de notre array

      // si index est diffÃ©rent de idItem tu renvoie le tableau.
      if(index !== idItem) return value
    })
    setTodo({array: arrayAfterDelete}) // On remet Ã  jour le tableau initial
    save(arrayAfterDelete)
  }

  const update = (idItem) => {
    const newArray = [...todo.array] // on crÃ©e une copie de notre todo.array pour eviter de modifier le tableau initiale (sÃ©curitÃ©)
    const arrayAfterUpdate = newArray.filter((value, index) => {
      if(index === idItem ) { 
        /*
          isActive doit Ãªtre different de lui mÃªme.
          donc si isActive est = Ã  true alors il deviendra = Ã  false et vice-versa. 
        */
        value.isActive = !value.isActive 
      }
      return value
    })
    setTodo({array: arrayAfterUpdate}) // On met Ã  jour todo.array
    save(arrayAfterUpdate) // On call la methode save qui mettra Ã  jour notre state "store". Puis elle enregistrera notre todo.array en loc
  }

  const save = (array) => {
    setStore(array)
    localStorage.setItem('array', JSON.stringify(array)) // on convertit nos donnÃ©es en Json pour pouvoir les stocker dans le localStorage.
  }

  const getItemLocalStorage = () => {
    const data = localStorage.getItem('array') // on rÃ©cupÃ©re le contenu du tableau dans le store
    const dataParsed = JSON.parse(data) // on parse le JSON string en Javascript 
    if(typeof dataParsed === "object") // si notre data est bien un objet alors on met Ã  jour le store
    {
      setStore(dataParsed)
    }else{ // sinon on renvoie un tableau vide
      return [] 
    }
    return dataParsed
  }

  const handleChange = (event) => {
    const { name, value } = event.target 
    setTodo(todo => ({...todo, [name]: value }))
  }

  const handleSubmit = (e) => {
    e.preventDefault()

    /* 
      On crÃ©e un objet qui va contenir le name de l'item et son statut
      Le statut nous permettra d'activer la tÃ¢che ou bien de la 
      dÃ©sactiver grÃ¢ce Ã  un boolean.
      Ce qui nous permettra par la suite.
    */
    const objet = {
      name: todo.item,
      isActive: true
    }


    todo.array.push(objet) // on push l'objet dans l'array
    save(todo.array) // on save on array dans le storage

    e.target.reset() // on reset l'input
    setTodo(todo => ({...todo, tache: ''}))
  }

  return(
    <div>
      <h1>Todo List ðŸš€</h1>
      {store && store.map((value, index) => {
        return(
          <div key={index} className="items">
            {/* Si le isActive de la tÃ¢che est = Ã  true alors la class de notre div est Ã©gal Ã  rien sinon elle sera Ã©gale Ã  barree */}
            <p className={value.isActive ? "" : "barree"}  onClick={() => update(index)} >{value.name}</p>
            <img src="" onClick={() => delteItem(index)} />
          </div>
        )
      })}
      <form onSubmit={handleSubmit} >
        <input 
          type="text" 
          placeholder="Add item"
          name="item"
          onChange={handleChange}
          />
          <button>valider</button>
      </form>
    </div>
  )
}
export default TodoList;